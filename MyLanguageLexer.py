# Generated from MyLanguage.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,27,271,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,
        1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,
        11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,14,1,15,4,15,96,8,15,
        11,15,12,15,97,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
        1,16,3,16,111,8,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
        1,17,1,17,1,17,1,17,1,17,1,17,3,17,128,8,17,1,18,1,18,1,18,1,18,
        1,18,1,18,1,18,1,18,1,18,1,18,3,18,140,8,18,1,19,4,19,143,8,19,11,
        19,12,19,144,1,20,1,20,5,20,149,8,20,10,20,12,20,152,9,20,1,21,3,
        21,155,8,21,1,21,4,21,158,8,21,11,21,12,21,159,1,22,3,22,163,8,22,
        1,22,4,22,166,8,22,11,22,12,22,167,1,22,1,22,4,22,172,8,22,11,22,
        12,22,173,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,3,23,185,
        8,23,1,24,1,24,4,24,189,8,24,11,24,12,24,190,1,24,1,24,4,24,195,
        8,24,11,24,12,24,196,5,24,199,8,24,10,24,12,24,202,9,24,1,24,1,24,
        1,24,4,24,207,8,24,11,24,12,24,208,1,24,1,24,4,24,213,8,24,11,24,
        12,24,214,5,24,217,8,24,10,24,12,24,220,9,24,1,24,1,24,1,24,1,24,
        1,24,3,24,227,8,24,1,25,1,25,1,25,1,25,1,25,4,25,234,8,25,11,25,
        12,25,235,1,25,1,25,1,25,1,25,1,25,4,25,243,8,25,11,25,12,25,244,
        1,25,1,25,4,25,249,8,25,11,25,12,25,250,5,25,253,8,25,10,25,12,25,
        256,9,25,3,25,258,8,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,
        26,1,26,1,26,1,26,0,0,27,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,
        19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,
        41,21,43,22,45,23,47,24,49,25,51,26,53,27,1,0,9,3,0,10,10,13,13,
        32,32,1,0,9,9,2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,122,1,0,
        48,57,1,0,32,32,6,0,39,39,46,46,48,57,65,90,95,95,97,122,10,0,9,
        10,13,13,32,32,39,39,44,44,46,46,48,57,65,90,95,95,97,122,6,0,32,
        32,35,35,48,57,65,90,95,95,97,122,306,0,1,1,0,0,0,0,3,1,0,0,0,0,
        5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,
        1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,
        1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,
        1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,
        1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,1,55,
        1,0,0,0,3,57,1,0,0,0,5,59,1,0,0,0,7,61,1,0,0,0,9,63,1,0,0,0,11,65,
        1,0,0,0,13,71,1,0,0,0,15,73,1,0,0,0,17,75,1,0,0,0,19,77,1,0,0,0,
        21,81,1,0,0,0,23,84,1,0,0,0,25,86,1,0,0,0,27,88,1,0,0,0,29,90,1,
        0,0,0,31,95,1,0,0,0,33,110,1,0,0,0,35,127,1,0,0,0,37,139,1,0,0,0,
        39,142,1,0,0,0,41,146,1,0,0,0,43,154,1,0,0,0,45,162,1,0,0,0,47,184,
        1,0,0,0,49,226,1,0,0,0,51,257,1,0,0,0,53,259,1,0,0,0,55,56,5,43,
        0,0,56,2,1,0,0,0,57,58,5,45,0,0,58,4,1,0,0,0,59,60,5,42,0,0,60,6,
        1,0,0,0,61,62,5,47,0,0,62,8,1,0,0,0,63,64,5,37,0,0,64,10,1,0,0,0,
        65,66,5,119,0,0,66,67,5,104,0,0,67,68,5,105,0,0,68,69,5,108,0,0,
        69,70,5,101,0,0,70,12,1,0,0,0,71,72,5,40,0,0,72,14,1,0,0,0,73,74,
        5,41,0,0,74,16,1,0,0,0,75,76,5,58,0,0,76,18,1,0,0,0,77,78,5,102,
        0,0,78,79,5,111,0,0,79,80,5,114,0,0,80,20,1,0,0,0,81,82,5,105,0,
        0,82,83,5,110,0,0,83,22,1,0,0,0,84,85,5,91,0,0,85,24,1,0,0,0,86,
        87,5,93,0,0,87,26,1,0,0,0,88,89,5,44,0,0,89,28,1,0,0,0,90,91,5,110,
        0,0,91,92,5,111,0,0,92,93,5,116,0,0,93,30,1,0,0,0,94,96,7,0,0,0,
        95,94,1,0,0,0,96,97,1,0,0,0,97,95,1,0,0,0,97,98,1,0,0,0,98,99,1,
        0,0,0,99,100,6,15,0,0,100,32,1,0,0,0,101,111,5,61,0,0,102,103,5,
        43,0,0,103,111,5,61,0,0,104,105,5,45,0,0,105,111,5,61,0,0,106,107,
        5,42,0,0,107,111,5,61,0,0,108,109,5,47,0,0,109,111,5,61,0,0,110,
        101,1,0,0,0,110,102,1,0,0,0,110,104,1,0,0,0,110,106,1,0,0,0,110,
        108,1,0,0,0,111,34,1,0,0,0,112,128,5,60,0,0,113,114,5,60,0,0,114,
        128,5,61,0,0,115,128,5,62,0,0,116,117,5,62,0,0,117,128,5,61,0,0,
        118,119,5,61,0,0,119,128,5,61,0,0,120,121,5,33,0,0,121,128,5,61,
        0,0,122,123,5,97,0,0,123,124,5,110,0,0,124,128,5,100,0,0,125,126,
        5,111,0,0,126,128,5,114,0,0,127,112,1,0,0,0,127,113,1,0,0,0,127,
        115,1,0,0,0,127,116,1,0,0,0,127,118,1,0,0,0,127,120,1,0,0,0,127,
        122,1,0,0,0,127,125,1,0,0,0,128,36,1,0,0,0,129,130,5,105,0,0,130,
        140,5,102,0,0,131,132,5,101,0,0,132,133,5,108,0,0,133,134,5,105,
        0,0,134,140,5,102,0,0,135,136,5,101,0,0,136,137,5,108,0,0,137,138,
        5,115,0,0,138,140,5,101,0,0,139,129,1,0,0,0,139,131,1,0,0,0,139,
        135,1,0,0,0,140,38,1,0,0,0,141,143,7,1,0,0,142,141,1,0,0,0,143,144,
        1,0,0,0,144,142,1,0,0,0,144,145,1,0,0,0,145,40,1,0,0,0,146,150,7,
        2,0,0,147,149,7,3,0,0,148,147,1,0,0,0,149,152,1,0,0,0,150,148,1,
        0,0,0,150,151,1,0,0,0,151,42,1,0,0,0,152,150,1,0,0,0,153,155,5,45,
        0,0,154,153,1,0,0,0,154,155,1,0,0,0,155,157,1,0,0,0,156,158,7,4,
        0,0,157,156,1,0,0,0,158,159,1,0,0,0,159,157,1,0,0,0,159,160,1,0,
        0,0,160,44,1,0,0,0,161,163,5,45,0,0,162,161,1,0,0,0,162,163,1,0,
        0,0,163,165,1,0,0,0,164,166,7,4,0,0,165,164,1,0,0,0,166,167,1,0,
        0,0,167,165,1,0,0,0,167,168,1,0,0,0,168,169,1,0,0,0,169,171,5,46,
        0,0,170,172,7,4,0,0,171,170,1,0,0,0,172,173,1,0,0,0,173,171,1,0,
        0,0,173,174,1,0,0,0,174,46,1,0,0,0,175,176,5,84,0,0,176,177,5,114,
        0,0,177,178,5,117,0,0,178,185,5,101,0,0,179,180,5,70,0,0,180,181,
        5,97,0,0,181,182,5,108,0,0,182,183,5,115,0,0,183,185,5,101,0,0,184,
        175,1,0,0,0,184,179,1,0,0,0,185,48,1,0,0,0,186,188,5,39,0,0,187,
        189,7,3,0,0,188,187,1,0,0,0,189,190,1,0,0,0,190,188,1,0,0,0,190,
        191,1,0,0,0,191,200,1,0,0,0,192,194,7,5,0,0,193,195,7,3,0,0,194,
        193,1,0,0,0,195,196,1,0,0,0,196,194,1,0,0,0,196,197,1,0,0,0,197,
        199,1,0,0,0,198,192,1,0,0,0,199,202,1,0,0,0,200,198,1,0,0,0,200,
        201,1,0,0,0,201,203,1,0,0,0,202,200,1,0,0,0,203,227,5,39,0,0,204,
        206,5,34,0,0,205,207,7,3,0,0,206,205,1,0,0,0,207,208,1,0,0,0,208,
        206,1,0,0,0,208,209,1,0,0,0,209,218,1,0,0,0,210,212,7,5,0,0,211,
        213,7,6,0,0,212,211,1,0,0,0,213,214,1,0,0,0,214,212,1,0,0,0,214,
        215,1,0,0,0,215,217,1,0,0,0,216,210,1,0,0,0,217,220,1,0,0,0,218,
        216,1,0,0,0,218,219,1,0,0,0,219,221,1,0,0,0,220,218,1,0,0,0,221,
        227,5,34,0,0,222,223,5,34,0,0,223,227,5,34,0,0,224,225,5,39,0,0,
        225,227,5,39,0,0,226,186,1,0,0,0,226,204,1,0,0,0,226,222,1,0,0,0,
        226,224,1,0,0,0,227,50,1,0,0,0,228,229,5,39,0,0,229,230,5,39,0,0,
        230,231,5,39,0,0,231,233,1,0,0,0,232,234,7,7,0,0,233,232,1,0,0,0,
        234,235,1,0,0,0,235,233,1,0,0,0,235,236,1,0,0,0,236,237,1,0,0,0,
        237,238,5,39,0,0,238,239,5,39,0,0,239,258,5,39,0,0,240,242,5,35,
        0,0,241,243,7,8,0,0,242,241,1,0,0,0,243,244,1,0,0,0,244,242,1,0,
        0,0,244,245,1,0,0,0,245,254,1,0,0,0,246,248,7,5,0,0,247,249,7,3,
        0,0,248,247,1,0,0,0,249,250,1,0,0,0,250,248,1,0,0,0,250,251,1,0,
        0,0,251,253,1,0,0,0,252,246,1,0,0,0,253,256,1,0,0,0,254,252,1,0,
        0,0,254,255,1,0,0,0,255,258,1,0,0,0,256,254,1,0,0,0,257,228,1,0,
        0,0,257,240,1,0,0,0,258,52,1,0,0,0,259,260,5,114,0,0,260,261,5,97,
        0,0,261,262,5,110,0,0,262,263,5,103,0,0,263,264,5,101,0,0,264,265,
        5,40,0,0,265,266,1,0,0,0,266,267,3,43,21,0,267,268,5,44,0,0,268,
        269,3,43,21,0,269,270,5,41,0,0,270,54,1,0,0,0,25,0,97,110,127,139,
        144,150,154,159,162,167,173,184,190,196,200,208,214,218,226,235,
        244,250,254,257,1,6,0,0
    ]

class MyLanguageLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    WS = 16
    ASSIGNMENT_OPERATOR = 17
    CONDITIONAL_OPERATORS = 18
    CONDITION = 19
    TAB = 20
    IDENTIFIER = 21
    INT = 22
    FLOAT = 23
    BOOL = 24
    STRING = 25
    COMMENT = 26
    RANGE = 27

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'+'", "'-'", "'*'", "'/'", "'%'", "'while'", "'('", "')'", 
            "':'", "'for'", "'in'", "'['", "']'", "','", "'not'" ]

    symbolicNames = [ "<INVALID>",
            "WS", "ASSIGNMENT_OPERATOR", "CONDITIONAL_OPERATORS", "CONDITION", 
            "TAB", "IDENTIFIER", "INT", "FLOAT", "BOOL", "STRING", "COMMENT", 
            "RANGE" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "WS", "ASSIGNMENT_OPERATOR", "CONDITIONAL_OPERATORS", 
                  "CONDITION", "TAB", "IDENTIFIER", "INT", "FLOAT", "BOOL", 
                  "STRING", "COMMENT", "RANGE" ]

    grammarFileName = "MyLanguage.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


