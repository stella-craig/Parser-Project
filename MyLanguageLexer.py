# Generated from MyLanguage.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,19,152,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,1,0,1,
        0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,3,3,51,8,3,1,4,1,4,1,5,1,5,
        1,5,1,5,1,5,3,5,60,8,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,3,6,69,8,6,1,
        6,1,6,1,6,3,6,74,8,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        3,8,87,8,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,
        1,14,4,14,101,8,14,11,14,12,14,102,1,14,1,14,1,14,4,14,108,8,14,
        11,14,12,14,109,1,14,3,14,113,8,14,1,15,4,15,116,8,15,11,15,12,15,
        117,1,15,1,15,4,15,122,8,15,11,15,12,15,123,3,15,126,8,15,1,16,1,
        16,5,16,130,8,16,10,16,12,16,133,9,16,1,17,1,17,1,17,1,17,1,17,1,
        17,1,17,1,17,1,17,3,17,144,8,17,1,18,4,18,147,8,18,11,18,12,18,148,
        1,18,1,18,0,0,19,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,1,0,5,1,0,46,
        46,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,
        3,0,9,10,13,13,32,32,175,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
        1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
        1,0,0,0,1,39,1,0,0,0,3,41,1,0,0,0,5,43,1,0,0,0,7,50,1,0,0,0,9,52,
        1,0,0,0,11,54,1,0,0,0,13,73,1,0,0,0,15,75,1,0,0,0,17,86,1,0,0,0,
        19,88,1,0,0,0,21,90,1,0,0,0,23,92,1,0,0,0,25,94,1,0,0,0,27,96,1,
        0,0,0,29,112,1,0,0,0,31,115,1,0,0,0,33,127,1,0,0,0,35,143,1,0,0,
        0,37,146,1,0,0,0,39,40,5,61,0,0,40,2,1,0,0,0,41,42,5,40,0,0,42,4,
        1,0,0,0,43,44,5,41,0,0,44,6,1,0,0,0,45,51,3,29,14,0,46,51,3,31,15,
        0,47,51,3,33,16,0,48,51,3,35,17,0,49,51,3,9,4,0,50,45,1,0,0,0,50,
        46,1,0,0,0,50,47,1,0,0,0,50,48,1,0,0,0,50,49,1,0,0,0,51,8,1,0,0,
        0,52,53,3,11,5,0,53,10,1,0,0,0,54,59,5,91,0,0,55,60,3,29,14,0,56,
        60,3,35,17,0,57,60,3,31,15,0,58,60,3,33,16,0,59,55,1,0,0,0,59,56,
        1,0,0,0,59,57,1,0,0,0,59,58,1,0,0,0,60,61,1,0,0,0,61,62,3,13,6,0,
        62,12,1,0,0,0,63,68,5,44,0,0,64,69,3,29,14,0,65,69,3,35,17,0,66,
        69,3,31,15,0,67,69,3,33,16,0,68,64,1,0,0,0,68,65,1,0,0,0,68,66,1,
        0,0,0,68,67,1,0,0,0,69,70,1,0,0,0,70,71,3,13,6,0,71,74,1,0,0,0,72,
        74,3,15,7,0,73,63,1,0,0,0,73,72,1,0,0,0,74,14,1,0,0,0,75,76,5,93,
        0,0,76,16,1,0,0,0,77,87,5,61,0,0,78,79,5,43,0,0,79,87,5,61,0,0,80,
        81,5,45,0,0,81,87,5,61,0,0,82,83,5,42,0,0,83,87,5,61,0,0,84,85,5,
        47,0,0,85,87,5,61,0,0,86,77,1,0,0,0,86,78,1,0,0,0,86,80,1,0,0,0,
        86,82,1,0,0,0,86,84,1,0,0,0,87,18,1,0,0,0,88,89,5,43,0,0,89,20,1,
        0,0,0,90,91,5,45,0,0,91,22,1,0,0,0,92,93,5,42,0,0,93,24,1,0,0,0,
        94,95,5,47,0,0,95,26,1,0,0,0,96,97,5,37,0,0,97,28,1,0,0,0,98,100,
        5,34,0,0,99,101,7,0,0,0,100,99,1,0,0,0,101,102,1,0,0,0,102,100,1,
        0,0,0,102,103,1,0,0,0,103,104,1,0,0,0,104,113,5,34,0,0,105,107,5,
        39,0,0,106,108,7,0,0,0,107,106,1,0,0,0,108,109,1,0,0,0,109,107,1,
        0,0,0,109,110,1,0,0,0,110,111,1,0,0,0,111,113,5,39,0,0,112,98,1,
        0,0,0,112,105,1,0,0,0,113,30,1,0,0,0,114,116,7,1,0,0,115,114,1,0,
        0,0,116,117,1,0,0,0,117,115,1,0,0,0,117,118,1,0,0,0,118,125,1,0,
        0,0,119,121,5,46,0,0,120,122,7,1,0,0,121,120,1,0,0,0,122,123,1,0,
        0,0,123,121,1,0,0,0,123,124,1,0,0,0,124,126,1,0,0,0,125,119,1,0,
        0,0,125,126,1,0,0,0,126,32,1,0,0,0,127,131,7,2,0,0,128,130,7,3,0,
        0,129,128,1,0,0,0,130,133,1,0,0,0,131,129,1,0,0,0,131,132,1,0,0,
        0,132,34,1,0,0,0,133,131,1,0,0,0,134,135,5,84,0,0,135,136,5,114,
        0,0,136,137,5,117,0,0,137,144,5,101,0,0,138,139,5,70,0,0,139,140,
        5,97,0,0,140,141,5,108,0,0,141,142,5,115,0,0,142,144,5,101,0,0,143,
        134,1,0,0,0,143,138,1,0,0,0,144,36,1,0,0,0,145,147,7,4,0,0,146,145,
        1,0,0,0,147,148,1,0,0,0,148,146,1,0,0,0,148,149,1,0,0,0,149,150,
        1,0,0,0,150,151,6,18,0,0,151,38,1,0,0,0,15,0,50,59,68,73,86,102,
        109,112,117,123,125,131,143,148,1,6,0,0
    ]

class MyLanguageLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    LITERAL = 4
    ARRAY = 5
    ARRAY_BEGIN = 6
    CONTINUE_ARRAY = 7
    END_ARRAY = 8
    ASSIGNMENT_OPERATOR = 9
    PLUS = 10
    MINUS = 11
    TIMES = 12
    DIVIDE = 13
    MOD = 14
    STRING = 15
    NUMBER = 16
    IDENTIFIER = 17
    BOOL = 18
    WS = 19

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "'('", "')'", "']'", "'+'", "'-'", "'*'", "'/'", "'%'" ]

    symbolicNames = [ "<INVALID>",
            "LITERAL", "ARRAY", "ARRAY_BEGIN", "CONTINUE_ARRAY", "END_ARRAY", 
            "ASSIGNMENT_OPERATOR", "PLUS", "MINUS", "TIMES", "DIVIDE", "MOD", 
            "STRING", "NUMBER", "IDENTIFIER", "BOOL", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "LITERAL", "ARRAY", "ARRAY_BEGIN", 
                  "CONTINUE_ARRAY", "END_ARRAY", "ASSIGNMENT_OPERATOR", 
                  "PLUS", "MINUS", "TIMES", "DIVIDE", "MOD", "STRING", "NUMBER", 
                  "IDENTIFIER", "BOOL", "WS" ]

    grammarFileName = "MyLanguage.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


